<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $name
 * @property string $surname
 * @property string $patronymic
 * @property string $username
 * @property string $email
 * @property string $password
 * @property int $roles_id
 *
 * @property Cart[] $carts
 * @property Order[] $orders
 * @property Role $roles
 */
class User extends \yii\db\ActiveRecord implements \yii\web\IdentityInterface
{
    public $password_repeat;
    public $rules;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'surname', 'username', 'email', 'password', 'password_repeat', 'rules'], 'required'],
            [['name', 'surname', 'patronymic'], 'match', 'pattern' => '/^[а-яА-Я -]*$/u'],
            [['username'], 'match', 'pattern' => '/^[a-zA-Z0-9-]*$/u'],
            [['roles_id'], 'integer'],
            ['email', 'email'],
            [['name', 'surname', 'patronymic', 'username', 'email', 'password'], 'string', 'max' => 255],
            [['password'], 'string', 'min' => 6],
            [['username', 'email'], 'unique', 'targetAttribute' => ['username', 'email']],
            [['roles_id'], 'exist', 'skipOnError' => true, 'targetClass' => Role::className(), 'targetAttribute' => ['roles_id' => 'id']],
            ['password_repeat', 'compare', 'compareAttribute' => 'password'],
            ['rules', 'compare', 'compareValue' => 1, 'message'=>"Нужно подтвердить согласие на обработку данных!"],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Имя',
            'surname' => 'Фамилия',
            'patronymic' => 'Отчество',
            'username' => 'Логин',
            'email' => 'Email',
            'password' => 'Пароль',
            'roles_id' => 'Роль',
            'password_repeat'=>'Повторение пароля',
            'rules'=>'Согласие на обработку'
        ];
    }

    /**
     * Gets query for [[Carts]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCarts()
    {
        return $this->hasMany(Cart::className(), ['user_id' => 'id']);
    }

    /**
     * Gets query for [[Orders]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getOrders()
    {
        return $this->hasMany(Order::className(), ['user_id' => 'id']);
    }

    /**
     * Gets query for [[Roles]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getRoles()
    {
        return $this->hasOne(Role::className(), ['id' => 'roles_id']);
    }

    public static function findByUsername($username)
    {
       return User::findOne(['username' => $username]);
    }

    public static function findIdentity($id)
    {
        return static::findOne($id); // TODO: Implement findIdentity() method.
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        return null; // TODO: Implement findIdentityByAccessToken() method.
    }

    public function getId()
    {
        return $this->id; // TODO: Implement getId() method.
    }

    public function getAuthKey()
    {
        return null; // TODO: Implement getAuthKey() method.
    }

    public function validateAuthKey($authKey)
    {
        return null;// TODO: Implement validateAuthKey() method.
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return $this->password === md5($password);
    }

    public function beforeSave($insert)
    {
        $this->password = md5($this->password);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function isAdmin()
    {
        return $this->roles_id === 1;
    }


}
